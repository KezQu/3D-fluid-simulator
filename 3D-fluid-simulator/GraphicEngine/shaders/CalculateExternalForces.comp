#version 460 core

layout (local_size_x = 5,
		local_size_y = 5,
		local_size_z = 5) in;

const uvec3 MeshSize = gl_NumWorkGroups * gl_WorkGroupSize;

const uint index = gl_GlobalInvocationID.x + 
			(gl_GlobalInvocationID.y * MeshSize.x) + 
			(gl_GlobalInvocationID.z * MeshSize.y * MeshSize.x);

const uint NONE = 0;
const uint STATIC = 1;
const uint DYNAMIC = 2;

const float g = 9.80665;

uniform uint physicsType = NONE;
uniform float dt;

struct ParticleProperties {
	vec4 velocityDFSPHfactor;
	vec4 position;
	dvec4 MassDensityPressureDro_Dt;
  vec4 color;
	uint neighbours[MaxNeighbours];
};

layout(std430, binding = 0) buffer dataBuffer{
	restrict ParticleProperties particle[];
};

vec3 CalculateViscosity(uint index_x);

void main(){
	if(physicsType == DYNAMIC){
		const double density0 = 0;//particle[index].MassDensityPressureDro_Dt.x * CalculateKernelWeight(vec3(0));
		vec3 viscosity_acceleration = CalculateViscosity(index);
		particle[index].velocityDFSPHfactor.xyz += dt * (viscosity_acceleration * 1e-3 - vec3(0, g, 0));
	}
}