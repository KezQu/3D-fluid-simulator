#version 460 core

layout (local_size_x = 1,
		local_size_y = 1,
		local_size_z = 1) in;

const uint NONE = 0;
const uint STATIC = 1;
const uint DYNAMIC = 2;

const uint IDLE = 0;
const uint INIT = 1;
const uint SIMULATION = 2;
const uint GEN_FRAME = 3;

const uint MaxNeighbours = 512;
const uint MaxValueNeighbour = uint(0xffff);

const float R = 8.31446261815324;
const float g = 9.80665;

const uvec3 MeshSize = gl_NumWorkGroups * gl_WorkGroupSize;

const uint MaxParticles = MeshSize.x * 
						  MeshSize.y * 
						  MeshSize.z;
const uint index = gl_GlobalInvocationID.x + 
			(gl_GlobalInvocationID.y * MeshSize.x) + 
			(gl_GlobalInvocationID.z * MeshSize.y * MeshSize.x);

uniform uint spaceLimiter;
uniform uint physicsType = NONE;
uniform uint SimulatorState = IDLE;
uniform float boundsViscosity;
uniform float particleRadius;
uniform float particleSpacing;
uniform float dt;
uniform float mass;
uniform float density0;

struct ParticleProperties {
	vec4 velocityDFSPHfactor;
	vec4 positionGroup;
	vec4 VolumeDensityPressureRohash;
	uint neighbours[MaxNeighbours];
};

struct stateVector{
	float x;
	vec3 y;
	float z;
};

struct Flux {
	vec3 x;
	mat3 y;
	vec3 z;
};

layout(std430, binding = 0) buffer dataBuffer{
	ParticleProperties particle[];
};

vec4 InitDefaultShape(in uint idx, in uvec3 invocation, in uint maxParticles);

void FindNeighbours(uint index_x, uint MaxParticles);
float CalculateDFSPHFactor(uint index_x);
vec3 CalculateGradPressure(uint index_x);
vec3 CalculateViscosity(uint index_x);

float CalculateDensity(uint index_x);
float CalculateAvgDensityHash(uint index_x);
float CalculateDerivDensity(uint index_x);
float CalculateAvgDerivDensity(uint index_x);


void main(){
	if(SimulatorState == INIT){
		particle[index].velocityDFSPHfactor = vec4(0);
		particle[index].positionGroup = vec4(0);
		particle[index].VolumeDensityPressureRohash = vec4(0);
		if(physicsType != NONE){
			particle[index].positionGroup = InitDefaultShape(index, gl_GlobalInvocationID, MaxParticles) * particleRadius * particleSpacing;
		}
		if(physicsType == DYNAMIC){
			FindNeighbours(index, MaxParticles);
			particle[index].VolumeDensityPressureRohash.y = CalculateDensity(index);
			particle[index].VolumeDensityPressureRohash.x = (1. / CalculateDensity(index)) * mass;
			particle[index].velocityDFSPHfactor.w = CalculateDFSPHFactor(index);
		}
	}
	else if((SimulatorState == GEN_FRAME || SimulatorState == SIMULATION) && physicsType == DYNAMIC){
//---------------------------------Calc non pressure forces--------------------------------------
		const float m_i = mass;
		const float ro_i = particle[index].VolumeDensityPressureRohash.y;

		vec3 viscosity_acceleration = CalculateViscosity(index) / ro_i;
		particle[index].velocityDFSPHfactor.xyz += dt * (viscosity_acceleration - vec3(0, g, 0));
		memoryBarrierBuffer();
		barrier();
//---------------------------------Calc Density free solver--------------------------------------
		float factor_x = particle[index].velocityDFSPHfactor.w;
		// 
		for(int i = 0; i < 100 && abs(CalculateAvgDensityHash(index) - density0) > 1e-2; i++){
			float p_hash= particle[index].VolumeDensityPressureRohash.w = particle[index].VolumeDensityPressureRohash.y + dt * CalculateDerivDensity(index);
			particle[index].VolumeDensityPressureRohash.z = (p_hash - density0) * factor_x / pow(dt, 2);
			memoryBarrierBuffer();
			barrier();

			particle[index].velocityDFSPHfactor.xyz -= dt * CalculateGradPressure(index) * 1e-4;
			memoryBarrierBuffer();
			barrier();
		}

//---------------------------------Check worlds bounds--------------------------------------
	if(length(particle[index].velocityDFSPHfactor.xyz) > 1e-3){
		vec3 vec_form_center = particle[index].positionGroup.xyz + dt * particle[index].velocityDFSPHfactor.xyz;
		// if(length(vec_form_center) >= spaceLimiter){
		// 	vec3 normal = - vec_form_center / length(vec_form_center);
		// 	float Vn = dot(particle[index].velocityDFSPHfactor.xyz, normal);
		// 	particle[index].velocityDFSPHfactor.xyz += - boundsViscosity * 2 * Vn * normal;

		// 	particle[index].positionGroup.xyz *= spaceLimiter / length(vec_form_center);
		// }
		if(vec_form_center.x <= -spaceLimiter || vec_form_center.x >= spaceLimiter){
			particle[index].velocityDFSPHfactor.x = - particle[index].velocityDFSPHfactor.x;
		}
		if(vec_form_center.y <= -spaceLimiter || vec_form_center.y >= spaceLimiter){
			particle[index].velocityDFSPHfactor.y = - particle[index].velocityDFSPHfactor.y;
		}
		if(vec_form_center.z <= -spaceLimiter || vec_form_center.z >= spaceLimiter){
			particle[index].velocityDFSPHfactor.z = - particle[index].velocityDFSPHfactor.z;
		}

		particle[index].positionGroup.xyz += dt * particle[index].velocityDFSPHfactor.xyz;
		memoryBarrierBuffer();
		barrier();
	}
		
//---------------------------------Calc divergence free solver--------------------------------------
		FindNeighbours(index, MaxParticles);
		particle[index].VolumeDensityPressureRohash.y = CalculateDensity(index);
		particle[index].velocityDFSPHfactor.w = CalculateDFSPHFactor(index);
		factor_x = particle[index].velocityDFSPHfactor.w;
		particle[index].positionGroup.w = abs(CalculateAvgDensityHash(index) - density0);

		for(int i = 0; i < 100 && (abs(CalculateAvgDerivDensity(index)) > 1e-2); i++){
			particle[index].VolumeDensityPressureRohash.z = CalculateDerivDensity(index) * factor_x / dt;
			memoryBarrierBuffer();
			barrier();

			particle[index].velocityDFSPHfactor.xyz -= dt * CalculateGradPressure(index) * 1e-4;
			memoryBarrierBuffer();
			barrier();
		}
	}
}