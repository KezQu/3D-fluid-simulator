#version 460 core

layout (local_size_x = 1,
				local_size_y = 1,
				local_size_z = 1) in;

const uint NONE = 0;
const uint STATIC = 1;
const uint DYNAMIC = 2;

const uint IDLE = 0;
const uint INIT = 1;
const uint SIMULATION = 2;
const uint GEN_FRAME = 3;

const uint MaxNeighbours = 512;
const uint MaxValueNeighbour = uint(0xffff);

const float R = 8.31446261815324;

const uvec3 MeshSize = gl_NumWorkGroups * gl_WorkGroupSize;

const uint MaxParticles = MeshSize.x * 
						  MeshSize.y * 
						  MeshSize.z;
const uint index = gl_GlobalInvocationID.x + 
			(gl_GlobalInvocationID.y * MeshSize.x) + 
			(gl_GlobalInvocationID.z * MeshSize.y * MeshSize.x);


uniform uint physicsType = NONE;
uniform uint SimulatorState = IDLE;
uniform uint particleRadius = 1;
uniform float dt;
uniform float mass;
uniform float pressure0;

struct ParticleProperties {
	vec4 force;
	vec4 velocity;
	vec4 position;
	vec4 VolumeDensityPressureMass;
	uint neighbours[MaxNeighbours];
};

struct Vector{
	float x;
	vec3 y;
	float z;
};

struct Flux {
	vec3 x;
	mat3 y;
	vec3 z;
};

layout(std430, binding = 0) buffer dataBuffer{
	ParticleProperties particle[];
};

vec4 InitDefaultShape(in uint idx, in uvec3 invocation, in uint maxParticles);

mat3 GetRotationZMatrix(float alpha_z);
mat3 GetRotationYMatrix(float alpha_y);

float CalculateKernelWeight(vec3 x);
vec3 CalculateFrameVelocity(uint index_i, uint index_j);
void FindNeighbours(uint index, uint MaxParticles);

float CalculateOmega(uint index_x);

float CalculatePsi(uint index_i, uint index_x);
vec3 CalculateNearPsi(uint index_i, uint index_x);
mat3 CalculateGradW(uint index_x, Vector Wp);

Vector CalculateTimeDerivativeOfW(uint index_x, Vector Wp);
Vector PrepareRiemmanProblemSide(uint index_x, vec3 v_frame, vec3 x_mean_x, out vec3 dir_versor);
Flux CalculateReimannProblem(uint index_i, uint index_j);
	
Vector GenerateHydrodynamics(uint index_i);

float FindPressure(float volume){
		int n = 0;
		while (particle[index].neighbours[n] != MaxValueNeighbour) n++;
		const float pressure = R * (n + 1) * 273.f / volume;
		return pressure - pressure0;
}

void main(){
	if(SimulatorState == INIT){
		particle[index].force = vec4(0);
		uint i = index;
//		particle[index].velocity = vec4((i % 10), (-i % 7), (i % 5), 0) / 10.;
//		particle[index].velocity = vec4(1.f / ((index % 3) + 1));
		particle[index].velocity= vec4(0);
		particle[index].position= vec4(0);
		for(uint i = 0; i < MaxNeighbours; i++){
			particle[index].neighbours[i] = MaxValueNeighbour;
		}
		if(physicsType != NONE){
			particle[index].position = InitDefaultShape(index, gl_GlobalInvocationID, MaxParticles) * particleRadius;
			FindNeighbours(index, MaxParticles);
		}
		const float volume = 1. / CalculateOmega(index);
		float pressure = FindPressure(volume);
		particle[index].VolumeDensityPressureMass = vec4(volume, mass / volume, pressure, mass);
	}
	else if((SimulatorState == GEN_FRAME || SimulatorState == SIMULATION) && physicsType == DYNAMIC){

		Vector Q_n1 = Vector(0, vec3(0), 0);
		Q_n1 = GenerateHydrodynamics(index);
		barrier();
		particle[index].velocity = vec4(Q_n1.y / Q_n1.x, 0);
		particle[index].position = particle[index].position + particle[index].velocity * dt;

		for(uint i = 0; i < MaxNeighbours; i++){
			particle[index].neighbours[i] = MaxValueNeighbour;
		}
		FindNeighbours(index, MaxParticles);
		const float volume = 1. / CalculateOmega(index);
		float pressure = FindPressure(volume);
		particle[index].VolumeDensityPressureMass= vec4(volume, Q_n1.x / volume, pressure, Q_n1.x);
	}
}