#version 460 core

layout (local_size_x = 10,
		local_size_y = 10,
		local_size_z = 10) in;

const uint NONE = 0;
const uint STATIC = 1;
const uint DYNAMIC = 2;

const uint IDLE = 0;
const uint INIT = 1;
const uint SIMULATION = 2;
const uint GEN_FRAME = 3;

const uint MaxNeighbours = 512;
const uint MaxValueNeighbour = uint(0xffff);

const float R = 8.31446261815324;
const float g = 9.80665;

const uvec3 MeshSize = gl_NumWorkGroups * gl_WorkGroupSize;

const uint MaxParticles = MeshSize.x * 
						  MeshSize.y * 
						  MeshSize.z;
const uint index = gl_GlobalInvocationID.x + 
			(gl_GlobalInvocationID.y * MeshSize.x) + 
			(gl_GlobalInvocationID.z * MeshSize.y * MeshSize.x);

uniform uint spaceLimiter;
uniform float boundsViscosity;
uniform uint physicsType = NONE;
uniform uint SimulatorState = IDLE;
uniform uint particleRadius = 1;
uniform uint particleSpacing;
uniform float dt;
uniform float mass;
uniform float pressure0;

struct ParticleProperties {
	vec4 velocity;
	vec4 positionGroup;
	vec4 VolumeDensityPressureMass;
	uint neighbours[MaxNeighbours];
};

struct stateVector{
	float x;
	vec3 y;
	float z;
};

struct Flux {
	vec3 x;
	mat3 y;
	vec3 z;
};

layout(std430, binding = 0) buffer dataBuffer{
	ParticleProperties particle[];
};

vec4 InitDefaultShape(in uint idx, in uvec3 invocation, in uint maxParticles);
float CalculateKernelWeight(vec3 points_dist);
vec3 CalculateDerivKernelWeight(vec3 points_dist);
void FindNeighbours(uint index_x, uint MaxParticles);
float CalculatePressure(uint index_x);
float CalculateDensity(uint index_x);
vec3 CalculateDerivPressure(uint index_x);
vec3 CalculateViscosity(uint index_x);


void main(){
	if(SimulatorState == INIT){
		uint i = index;
		particle[index].velocity = vec4(0);
//		particle[index].velocity = vec4((i % 10), (-i % 7), (i % 5), 0) / 10.;
//		particle[index].velocity = vec4(1.f / ((index % 3) + 1));
		particle[index].positionGroup = vec4(0);
		particle[index].VolumeDensityPressureMass = vec4(0);
		for(uint i = 0; i < MaxNeighbours; i++){
			particle[index].neighbours[i] = MaxValueNeighbour;
		}
		if(physicsType != NONE){
			particle[index].positionGroup = InitDefaultShape(index, gl_GlobalInvocationID, MaxParticles) * particleRadius * particleSpacing;
		}
		if(physicsType == DYNAMIC){
			FindNeighbours(index, MaxParticles);
			particle[index].VolumeDensityPressureMass.w = mass;
			particle[index].VolumeDensityPressureMass.y = CalculateDensity(index);
			particle[index].VolumeDensityPressureMass.x = (1. / CalculateDensity(index)) * mass;
			particle[index].VolumeDensityPressureMass.z = CalculatePressure(index);
		}
	}
	else if((SimulatorState == GEN_FRAME || SimulatorState == SIMULATION) && physicsType == DYNAMIC){
		const float m_i = particle[index].VolumeDensityPressureMass.w;
		const float ro_i = particle[index].VolumeDensityPressureMass.y;
		const vec3 v_i = particle[index].velocity.xyz;

		vec3 viscosity_acceleration = CalculateViscosity(index) / ro_i;
		vec3 v_hash = v_i + dt * (viscosity_acceleration);// - vec3(0, g, 0));
		memoryBarrierBuffer();
		barrier();
		
		const vec3 v_i1 = v_hash - dt * CalculateDerivPressure(index) / ro_i;
		memoryBarrierBuffer();
		barrier();
		
		particle[index].velocity.xyz = v_i1;
		if(length(particle[index].positionGroup.xyz + dt * v_i1) >= spaceLimiter){
			vec3 normal = - vec3(1);

			particle[index].velocity.xyz = boundsViscosity * normal * v_i1;
			particle[index].positionGroup.xyz *= spaceLimiter / length(particle[index].positionGroup.xyz + dt * v_i1);
		}
		particle[index].positionGroup.xyz += dt * v_i1;
		memoryBarrierBuffer();
		barrier();
		
		FindNeighbours(index, MaxParticles);
		particle[index].VolumeDensityPressureMass.y = CalculateDensity(index);
		particle[index].VolumeDensityPressureMass.z = CalculatePressure(index);
	}
}