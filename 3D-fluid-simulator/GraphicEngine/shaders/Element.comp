#version 460 core

layout (local_size_x = 10,
		local_size_y = 10,
		local_size_z = 10) in;

const uint NONE = 0;
const uint STATIC = 1;
const uint DYNAMIC = 2;

const uint IDLE = 0;
const uint INIT = 1;
const uint SIMULATION = 2;
const uint GEN_FRAME = 3;

const uint MaxValueNeighbour = uint(0xffff);
const float cellRadius = 5;
const uint MaxCells = uint(1200 / cellRadius);
const uint HashGridSize = MaxCells * MaxCells;
const uint CellCapacity = uint(3.1415 * (4. / 3.) * pow(cellRadius, 3));
const uint MaxNeighbours = 512;

const float R = 8.31446261815324;
const float g = 9.80665;

const uvec3 MeshSize = gl_NumWorkGroups * gl_WorkGroupSize;

const uint MaxParticles = MeshSize.x * 
						  MeshSize.y * 
						  MeshSize.z;
const uint index = gl_GlobalInvocationID.x + 
			(gl_GlobalInvocationID.y * MeshSize.x) + 
			(gl_GlobalInvocationID.z * MeshSize.y * MeshSize.x);

uniform mat4 model;

uniform uint physicsType = NONE;
uniform uint SimulatorState = IDLE;

uniform float shapeRadius;
uniform float particleSpacing;
uniform float influenceKernel;
uniform float dt;
uniform float mass;

struct ParticleProperties {
	vec4 velocityDFSPHfactor;
	vec4 position;
	vec4 VolumeDensityPressureRohash;
	vec4 particleColor;
	uint neighbours[MaxNeighbours];
};

struct stateVector{
	float x;
	vec3 y;
	float z;
};

struct Flux {
	vec3 x;
	mat3 y;
	vec3 z;
};

layout(std430, binding = 0) buffer dataBuffer{
	restrict ParticleProperties particle[];
};
layout(std430, binding = 1) buffer spaceGrid{
	uint space_grid[HashGridSize][CellCapacity];
};

vec4 InitDefaultShape(in uint idx, in uvec3 invocation, in uint maxParticles);

void ClearSpaceGrid(uint index_x, uint MaxParticles);
void AssignToCell(uint index_x);
void FindNeighbours(uint index_x, uint MaxParticles);

float CalculateDFSPHFactor(uint index_x);
vec3 CalculateGradPressure(uint index_x);
vec3 CalculateViscosity(uint index_x);

float CalculateDensity(uint index_x);
float CalculateAvgDensityHash(uint index_x);
float CalculateDerivDensity(uint index_x);
float CalculateAvgDerivDensity(uint index_x);

vec4 ChooseParticleColor(uint index_x);
void CheckWorldBounds(uint index_x);
vec3 BounceOfAWall(vec3 direction, vec3 normal);

void main(){
	if(SimulatorState == INIT){
		particle[index].velocityDFSPHfactor = vec4(0);
		particle[index].position = vec4(0);
		particle[index].VolumeDensityPressureRohash = vec4(0);
		if(physicsType != NONE){
			particle[index].position = (InitDefaultShape(index, gl_GlobalInvocationID, MaxParticles) + particleSpacing) * shapeRadius;
		}
		if(physicsType == DYNAMIC){
//--------------------------------------Find Neighbours------------------------------------------
			//ClearSpaceGrid(index, MaxParticles);
			//AssignToCell(index);
			FindNeighbours(index, MaxParticles);
//------------------------------------Initialize properties--------------------------------------
			particle[index].VolumeDensityPressureRohash.y = CalculateDensity(index);
			particle[index].velocityDFSPHfactor.w = CalculateDFSPHFactor(index);
		}
	}
	else if((SimulatorState == GEN_FRAME || SimulatorState == SIMULATION) && physicsType == DYNAMIC){
//	particle[index].position.xyz = (model * vec4(particle[index].position.xyz, 1.0)).xyz;
//---------------------------------Calc non pressure forces--------------------------------------
		const float m_i = mass;
		const float density0 = mass;

		const float ro_i = particle[index].VolumeDensityPressureRohash.y;

		vec3 viscosity_acceleration = CalculateViscosity(index) / ro_i;
		particle[index].velocityDFSPHfactor.xyz += dt * (viscosity_acceleration - vec3(0, g, 0));
//---------------------------------Calc Density free solver--------------------------------------
		float factor_x = particle[index].velocityDFSPHfactor.w;
		// 
		float ro_hash = particle[index].VolumeDensityPressureRohash.y + dt * CalculateDerivDensity(index);
		for(int i = 0; i < 500; i++){
			particle[index].VolumeDensityPressureRohash.z = (ro_hash  - density0) * factor_x / pow(dt, 2);

			particle[index].velocityDFSPHfactor.xyz -= dt * CalculateGradPressure(index);
			ro_hash = particle[index].VolumeDensityPressureRohash.y + dt * CalculateDerivDensity(index);

			if((abs((ro_hash - density0)) / density0 < 2e-2) && i > 5){
				break;
			}
		}
		particle[index].VolumeDensityPressureRohash.w = abs(particle[index].VolumeDensityPressureRohash.y - density0) / density0;

//---------------------------------Check worlds bounds--------------------------------------
		CheckWorldBounds(index);
		
		particle[index].position.xyz += dt * particle[index].velocityDFSPHfactor.xyz;
		
//--------------------------------------Find Neighbours------------------------------------------
		barrier();
		memoryBarrierBuffer();
		//ClearSpaceGrid(index, MaxParticles);
		//AssignToCell(index);
		FindNeighbours(index, MaxParticles);
//---------------------------------Calc divergence free solver--------------------------------------
		particle[index].VolumeDensityPressureRohash.y = CalculateDensity(index);
		particle[index].velocityDFSPHfactor.w = CalculateDFSPHFactor(index);
		factor_x = particle[index].velocityDFSPHfactor.w;

		float d_ro = CalculateDerivDensity(index);
		for(int i = 0; i < 500 && !((abs(d_ro) < 1e-2) && i > 2); i++){
			particle[index].VolumeDensityPressureRohash.z = d_ro * factor_x / dt;
			
			particle[index].velocityDFSPHfactor.xyz -= dt * CalculateGradPressure(index);
			d_ro = CalculateDerivDensity(index);
		}
		barrier();
		memoryBarrierBuffer();
//		particle[index].position.xyz = (inverse(model) * vec4(particle[index].position.xyz, 1.0)).xyz;
	}
	particle[index].particleColor = ChooseParticleColor(index);
}